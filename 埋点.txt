1 手工埋点，代码埋点
代码埋点出现的时间很早了，在 Google Analytics 年代
三方数据分析服务商，百度统计、友盟、TalkingData
技术原理：APP或者界面初始化的时候，初始化第三方数据分析服务商的SDK(Software Development Kit)，然后在某个事件发生时就调用SDK里面相应的数据发送接口发送数据
第一个例子是在使用者的某个 Android APP 里面，统计某个由 Activity 构成的页面的访问次数
第二个例子稍微复杂点，它不再是统计页面访问这样一个默认的事件，而是统计一个自定义事件。例如，一个电商APP，在用户点击“购买”按钮时，想统计“购买”这个自定义事件的相应信息
优点：
使用者控制精准，可以非常精确地选择什么时候发送数据
使用者可以比较方便地设置自定义属性、自定义事件，传递比较丰富的数据到服务端
缺点：
（1）埋点代价比较大，每个控件的埋点都需要代码，必须是技术人员才能完成

（2）更新的代价比较大，每一次更新都必须改代码，然后通过各个应用市场进行分发，并且总会有相当多数量的用户不喜欢更新APP，这样埋点代码也就得不到更新了

（3）数据传输时效性和可靠性的问题，需要后端收集数据来解决了


2 可视化埋点
开发人员除集成采集 SDK 外，不需要额外去写埋点代码，而是由业务人员通过访问分析平台的 圈选 功能来“圈”出需要对用户行为进行捕捉的控件，并给出事件命名。圈选完毕后，这些配置会同步到各个用户的终端上，由采集 SDK 按照圈选的配置自动进行用户行为数据的采集和发送。
优点：

（1）可视化埋点很好地解决了代码埋点的埋点代价大和更新代价大两个问题。覆盖的功能有限，不是所有的控件操作都可以通过这种方案进行定制

（2）埋点只需业务同学接入，无需开发支持


缺点：

（1）无法做到自定义获取数据，可视化埋点覆盖的功能有限；

（2）企业针对SDK开发难度相比代码埋点大

（3）仅支持客户端行为

3.无埋点
开发人员集成采集 SDK 后，SDK 便直接开始捕捉和监测用户在应用里的所有行为，并全部上报，不需要开发人员添加额外代码
优点：

（1）由于采集的是全量数据，所以产品迭代过程中是不需要关注埋点逻辑的，也不会出现漏埋、误埋等现象。

（2）全量数据，可以大大减少运营和产品的试错成本。

（3）无需埋点，方便快捷
，配置即代码
（4）减少了因为人员流动带来的沟通成本

（5）无需开发，业务人员埋点即可，可视化；

（6）支持先上报数据，后进行埋点


缺点：

(1) 缺点与可视化埋点相同，未解决个性化自定义获取数据的问题，缺乏数据获取的灵活性，只能采集到用户交互数据；

无埋点只是针对一些简单的操作统计，如按钮点击的次数、时间等。如果是比较复杂的应用场景，例如支付事件，需要统计商品名称、价格、数量等，这就需要通过埋点来收集详细的参数
(2) 企业针对SDK开发难度较大，一般由数据分析企业研发提供，
使用第三方提供的埋点方案，有如下缺陷：

a、数据源丢失，应用上报的数据上传至第三方服务端，可能造成
企业泄密或用户的关键数据丢失；

b、供应商数据丢包问题，无法根据应用特性进行改善

(3）无埋点采集全量数据，给数据传输和服务器增加压力

(4）仅仅支持客户端

